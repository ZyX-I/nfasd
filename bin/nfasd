#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK
import argcomplete, argparse
from stringscore import liquidmetal
import os     # to execute nvim
from neovim import attach
from argcomplete import warn # logging

# for file name partial matching
def fuzzyfinder(user_input, collection):
    suggestions = []
    reverse_input = user_input[::-1]
    for item in collection:
        first_score = liquidmetal.score(item, user_input)   # Checks if the current item matches the regex.
        if first_score > 0.0:
            reverse_score = liquidmetal.score(item[::-1], reverse_input)
            match = max(first_score, reverse_score)
            warn('len: ' + str(match) + ' ' + item)
            suggestions.append((match, item))
    return [x for _, x in sorted(suggestions, reverse=True)]

# no need to validate
def novalidator(completion, prefix):
    # return TRUE
    return completion.startwith(prefix)

nvim = attach('child', argv=["nvim", "--embed"])
nvim.command('let nfasd_history = v:oldfiles')
history = nvim.vars['nfasd_history']

def nvim_recent_files(prefix, parsed_args, **kwargs):
    res = []
    if len(prefix):
      res = fuzzyfinder(prefix, history)
    else:
      res = history

    warn('matched ' + '\n'.join(res))
    # can only return single value, otherwise the terminal will only show the longest common prefix
    res = res[:1]

    # need to add prefix in zsh
    # otherwise, the terminal won't show anything (bash doesn't need it)
    return [ prefix + ' ' + x for x in res]

parser = argparse.ArgumentParser()
parser.add_argument("-e", help='the executable name of neovim')
parser.add_argument("filepath", help='the path of the recent file').completer = nvim_recent_files

def my_validator(current_input, keyword_to_check_against):
    # warn('my_validator'+current_input+keyword_to_check_against)
    # Pass through ALL options even if they don't all start with 'current_input'
    return True

argcomplete.autocomplete(parser, validator=my_validator, always_complete_options=False) # don't complete annoying --help

# args = parser.parse_args()
args, unknown = parser.parse_known_args()

# print args.filepath
# print args.e
# print unknown

if len(unknown):
  path = unknown[0]
else:
  path = args.filepath

if not os.path.exists(path):
  # the user might forget to press tab (like nfasd -e nvim mysomet...)
  # help the user press "the tab"
  res = nvim_recent_files(path, None)
  if len(res):
    path = res[0][len(path)+1:] # remove prefix

# don't do anything when the file doesn't exist
# we don't want user to accidentally create some file with strange partial file name
if os.path.exists(path):
  exe_name = 'nvim'
  if len(args.e):
    exe_name = args.e # use the user-defined executable name
  exec_str = exe_name + ' ' + path

  os.system(exec_str)
